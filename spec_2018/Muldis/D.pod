=pod

=encoding utf8

=head1 NAME

Muldis::D - Formal spec of Muldis D relational DBMS lang

=head1 VERSION

This document is Muldis::D version 0.300.0.

=head1 DESCRIPTION

This document aggregate is the human readable authoritative
formal specification of the B<Muldis D> language, and of the virtual
environment in which it executes.  If there's a conflict between any other
document and this one, then either the other document is in error, or the
developers were negligent in updating it before this one.

The fully-qualified name of this document aggregate and the language
specification it contains (as a single composition) is
C<Muldis_D https://muldis.com 0.300.0>.  It is the
official/original (not embraced and extended) Muldis D language
specification by the authority Muldis Data Systems (C<https://muldis.com>),
version number C<0.300.0> (this number matches the VERSION in this file).

The B<Muldis D> language aggregate specification assumes that Muldis D,
similar to some common programming languages, can be effectively defined
in terms of 3 individual specifications covering in turn its semantics
(architecture, behaviour, and type system), its syntax (grammar), and its
vocabulary (standard library).  These 3 specifications are mostly
independent and each one can evolve on its own and have many versions over
time, some of those under the original author's control, and some under the
control of other parties.

For the official Muldis D by authority C<https://muldis.com>, the default 3
component specifications are named, respectively:

=over

=item *

B<Muldis D Foundation> (B<MDF>) -
C<Muldis_D_Foundation https://muldis.com 0.300.0>.

=item *

B<Muldis D Plain Text> (B<MDPT>) -
C<Muldis_D_Plain_Text https://muldis.com 0.300.0>.

=item *

B<Muldis D Standard Library> (B<MDSL>) -
C<Muldis_D_Standard_Library https://muldis.com 0.300.0>.

=back

In this context, the B<Muldis D> language aggregate specification is mostly
just a top-level catalogue pointing to those 3 primary components, as well
as to some other things in the ecosystem.

The B<Muldis D Foundation> specification defines the fundamental
architecture, behaviour, and type system of Muldis D.  For all intents and
purposes, it is the entire official Muldis D language specification except
for any candidate syntaxes and any candidate standard libraries.  So it is
generally useful to read this specification first and consider any others
subservient to it.  While many alternative syntaxes and standard libraries
are likely and expected to exist in a combination called B<Muldis D>,
substituting out B<Muldis D Foundation> for something with a large degree
of changes would likely yield a combination that is best to name something
other than B<Muldis D>.  B<Muldis D Foundation> defines the I<native> form
of Muldis D source code, which is homoiconic data structures composed
largely in terms of function calls, and is expressly agnostic to any
concrete language syntax.  It defines the user-facing behaviour/API of the
small number of foundational / low-level system-defined types and
operators and other features which are canonically written in one or more
third-party languages which are I<hosting> Muldis D; formally their
implementation or internals are expected to be hidden from the Muldis D
user, and differ in arbitrarily large ways between hosts, so to take
advantage of the strengths of each host.
See L<Muldis::D::Foundation> for the B<Muldis D Foundation> specification.

The B<Muldis D Plain Text> specification defines the grammar of the official
concrete Muldis D language syntax that every Muldis D implementation
is expected to support as an option.  It is intended to be a standard format
of interchange of both code and data between all Muldis D implementations.
It is also expected to be the syntax of choice for users to write Muldis D
applications or database schemas in, having the most direct correspondance
to the I<native> homoiconic Muldis D defined by B<Muldis D Foundation>, and
is designed to have a similar level of conciseness and readability as what
users get in both typical general purpose application programming languages
as well as SQL.
That being said, Muldis D is designed to empower a variety of alternate
language syntaxes to be used in different areas of a program, either in
support of user tastes, or for better host/peer language integration
(including their ORMs), or as a method of emulating other programming
language environments or SQL DBMSs.
See L<Muldis::D::Plain_Text> for the B<Muldis D Plain Text> specification.

The B<Muldis D Standard Library> specification comprises a documented
library written entirely in Muldis D which provides its common core
vocabulary, the system-defined data types and operators that regular users
of the language would employ directly in their applications and schemas.
It corresponds to the "standard library" that is intrinsic to or bundled
with typical general purpose application programming languages or SQL
DBMSs.  It is the bulk portion of Muldis D that is self-hosted and can be
shared by all Muldis D implementations, though the latter can choose to
internally substitute behaviour-maintaining host-native versions for
performance.  It comprises a set of Muldis D I<packages> (compilation
units) that users can choose from as dependencies of their applications and
schemas.  None are mandatory, and users can choose alternatives, but they
are recommended as the default options for their functionality.
See L<Muldis::D::Standard_Library> for the
B<Muldis D Standard Library> specification.

The L</VERSIONING> section in this file presents a formal and future-proofed
method for specifying the fully-qualified names of each versioned entity.

All code written in Muldis D should begin by specifying the fully-qualified
name of a concrete grammar it conforms to (either a B<MDPT> version or an
alternative), except that this concept doesn't apply to the B<MDF>
homoiconic native form.  Every Muldis D I<package> should both specify the
fully-qualified name of a foundation (a B<MDF> version typically) that it
is known to work with, as well as specify the fully-qualified names of all
other packages that satisfy its direct requirements, whether system-defined
(typically one or more C<MDSL>) or user-defined.  Doing all of this should
make the code
unambiguous to both human and machine (eg, implementing) readers of the code.

This B<Muldis D> aggregate is in the process of being mostly rewritten, with
large layout and language design changes that were conceived since the
middle of 2011 but that weren't formally published, and which are now
largely being implementation-driven.  The last release of the language
specification prior to the rewrite by authority C<https://muldis.com> had
the version number C<0.148.1>, and the first release after the rewrite
began had version number C<0.300>; there were no releases by
C<https://muldis.com> with version numbers between those two.

During the transition period, the Muldis-D distribution contains parts of
two distinct Muldis D specifications, the newer
C<Muldis_D https://muldis.com 0.300.0> which is being regularly
fleshed out, and the older C<Muldis_D https://muldis.com 0.148.1>
which is a static archive.  The parts of the older are all catalogued by
L<Muldis::D::Outdated> and live under its namespace, while the parts of the
newer all live outside the C<Outdated> namespace.  You should always read
the newer parts first, and just refer to the older parts for subject areas
not yet rewritten.  Older parts are subject to be removed piecemeal when
their content has been rewritten, and should all eventually go away.

=head1 VERSIONING

Every Muldis D I<package> (compilation unit) is expected to declare a
fully-qualified name, or I<identity>, so that it can easily be referred to
and be distinguished from every other package that does or might exist.
One main reason for referring is when one package I<X> is defined partly in
terms of another I<Y>, that is when I<Y uses X>, so this dependency can be
clearly stated.  A second main reason is in order to fetch a package from,
or store a package into, a I<compilation unit repository>, or otherwise
index a package loaded for execution.  This I<identity> requirement applies
both to every individual package of the B<MDSL> as well as to every other
package regardless of origin.

In addition, every Muldis D language component specification document is
similarly expected to declare its own fully-qualified name, so that it can
at the very least be referred to by other documentation or users.  In the
case of the B<MDF>, its name is also referred to by each package as a
fundamental dependency of its own kind.  In the case of the B<MDPT>, its
name is also referred to by each source code written in that syntax, so it
is explicitly clear on how to parse that code.

The expected format and meaning of a Muldis D fully-qualified name varies
depending on the specific kind of entity being named:

=over

=item *

The expected fully-qualified name of each Muldis D package version is the
same format and meaning for both declaration and reference.  It has 3 main
parts: I<package base name>, I<authority>, and I<version number>.  The
combination of these 3 parts is the identity of a package, and a program
can typically (but not necessarily always) use multiple versions of any
given package at once.  A I<package base name> is an ordered sequence of 1
or more nonempty character strings; while Muldis D itself places no other
restrictions on a package base name, it is expected that the community at
large should self-regulate reasonable names as is common for libraries or
modules for other programming languages.

=item *

The expected fully-qualified name of a B<Muldis D Foundation> version as
referenced as a dependency by a package has 2 main parts: I<authority>, and
I<version number>.

=item *

The expected fully-qualified name of a B<Muldis D Plain Text> version as
referenced by source code, where the latter declares the former to be its
format, has 4 main parts: I<family name>, I<syntax name>, I<authority>, and
I<version number>.  The I<family name> and I<syntax name> are simply the 2
character strings C<Muldis_D> and C<Plain_Text> respectively, for B<MDPT>;
alternative (non-legacy) concrete syntaxes can and are encouraged to use
the same format, albeit using some other distinguishing I<syntax name>.
Implementations of other arbitrary programming language or data formats in
terms of treating them as a Muldis D dialect can be arbitrarily complicated
as far as knowing how to distinguish said alternatives from each other,
depending on whether they have reliable simple format declarations or not.
Note that a leading MDPT declaration in source code should be effective as
a "magic number" for identifying it as being MDPT source code.

=item *

The expected fully-qualified name of a Muldis D language specification
document (component or aggregate) as declared in said document has 3 main
parts: I<document base name>, I<authority>, and I<version number>.  The
I<document base name> is a character string, officially used examples being
C<Muldis_D>, C<Muldis_D_Foundation>, C<Muldis_D_Plain_Text>, and
C<Muldis_D_Standard_Library>.

=back

The expected format and meaning of an I<authority> and a I<version number>
is the same for all of the above-mentioned kinds of entities, and so their
common definitions follow.

An I<authority> is some nonempty character string whose value uniquely
identifies the authority or author of the versioned entity.  Generally
speaking, the community at large should self-regulate authority identifier
strings so they are reasonable formats and so each prospective
authority/author has one of their own that everyone recognizes as theirs.
Note that an authority/author doesn't have to be an individual person; it
could be some corporate entity instead.

Examples of recommended I<authority> naming schemes include a qualified
base HTTP url belonging to the authority (example C<https://muldis.com>) or
a qualified user identifier at some well-known compilation unit repository
(example C<https://github.com/muldis> or C<cpan:DUNCAND>).

For all official/original works by Muldis Data Systems, Inc., the
I<authority> has always been C<https://muldis.com> and is expected to remain
so during the foreseeable future.

If someone else wants to I<embrace and extend> Muldis D, then they must use
their own (not C<https://muldis.com>) base authority identifier, to prevent
ambiguity, assist quality control, and give due credit.

In this context, I<embrace and extend> means for someone to do any of the
following:

=over

=item *

Releasing a modified version of this current multi-document or any
component thereof where the original of the modified version was released
by someone else (the original typically being the official release), as
opposed to just releasing a delta document that references the current one
as a foundation.  This applies both for unofficial modifications and for
official modifications following a change of who is the official maintainer.

=item *

Releasing a delta document for a version of this current multi-document or
any component thereof where the referenced original is released by someone
else, and where the delta either makes incompatible semantic or syntax
changes or makes changes to the C<System> package.

=back

A I<version number> is an ordered sequence of 1 or more integers.  A
I<version number> is used to distinguish between all of the versions of a
named entity that have a common I<authority>, per each kind of versioned
entity; version numbers typically indicate the release order of these
related versions and how easily users can substitute one version for
another.  The actual intended meaning of any given I<version number>
regarding for example substitutability is officially dependant on each
I<authority> and no implicit assumptions should be made that 2 I<version
number> with different I<authority> are comparable in any meaningful way,
aside from case-by-case where a particular I<authority> declares they use a
scheme compatible with another.  The only thing Muldis D requires is that
every distinct version of an entity has a distinct fully-qualified name.

For each official/original work by Muldis Data Systems related to Muldis D
and released after 2016 April 1, except where otherwise stated, it uses
I<semantic versioning> for each I<version number>, as described below.
Others are encouraged to follow the same format, but are not required to.

The I<semantic versioning> described below is intended to be the same as
that defined by the public standard B<Semantic Versioning 2.0.0> as
published at L<https://semver.org> but it is reworded here so that the
current document can be understood if the external standard disappears.

A I<version number> for authority C<https://muldis.com> is an ordered
sequence of integers, the order of these being from most significant to
least, with 3 positions [MAJOR,MINOR,PATCH] and further ones
possible.  The version sequence may have have as few as 1
most significant position.  Any omitted trailing position is treated as if
it were zero.  Each of {MAJOR,MINOR,PATCH} must be a non-negative integer.
MAJOR is always (except when
it is zero) incremented when a change is made which breaks
backwards-compatibility for functioning uses, such as when removing a
feature; it may optionally be incremented at other times, such as for
marketing purposes.  Otherwise, MINOR is always incremented when a change
is made that breaks forwards-compatibility for functioning uses, such as
when adding a feature; it may optionally be incremented at other times,
such as for when a large internals change is made.  Otherwise, PATCH must
be incremented when making any kind or size of change at all, as long as it
doesn't break compatibility; typically this is bug-fixes or performance
improvements or some documentation changes or any test suite changes.  For
fixes to bugs or security holes which users may have come to rely on in
conceptually functioning uses, they should be treated like API changes.
When MAJOR is zero, MINOR is incremented for any kind of breaking change.
There is no requirement that successive versions have adjacent integers,
but they must be increases.

Strictly speaking a I<version number> reflects intention of the authority's
release and not necessarily its actuality.  If PATCH is incremented but the
release unknowingly had a breaking change, then once this is discovered
another release should be made which increments PATCH again and undoes that
breaking change, in order to safeguard upgrading users from surprises; an
additional release can be made which instead increments MAJOR or MINOR with
the breaking change if that change was actually desired.

Currently this document does not specify matters such as how to indicate
maturity, for example production vs pre-production/beta/etc, so explicit
markers of such can either be omitted or be based on other standards.

I<This is all subject to change.>

=head1 SEE ALSO

Go to the L<Muldis::D::See_Also> file for the majority of external
references.

=head1 AUTHOR

Darren Duncan (C<darren@DarrenDuncan.net>)

=head1 LICENSE AND COPYRIGHT

This file is part of the formal specification of the B<Muldis D> language.

Muldis D is Copyright © 2002-2022, Muldis Data Systems, Inc.

L<https://muldis.com>

Muldis D is free documentation for software; you can redistribute it and/or
modify it under the terms of the Apache License, Version 2.0 (AL2) as
published by the Apache Software Foundation (L<https://www.apache.org>).
You should have received a copy of the AL2 as part of the Muldis D
distribution, in the file named "LICENSE/Apache-2.0.txt";
if not, see L<https://www.apache.org/licenses/LICENSE-2.0>.

Any versions of Muldis D that you modify and distribute must carry
prominent notices stating that you changed the files and the date of any
changes, in addition to preserving this original copyright notice and other
credits.

While it is by no means required, the copyright holder of Muldis D would
appreciate being informed any time you create a modified version of Muldis D
that you are willing to distribute, because that is a practical way of
suggesting improvements to the standard version.

=head1 TRADEMARK POLICY

MULDIS and MULDIS MULTIVERSE OF DISCOURSE are trademarks of Muldis Data
Systems, Inc. (L<https://muldis.com>).  The trademarks apply to
computer database software and related services.  See
L<https://muldis.com/trademark_policy.html> for the full written details
of Muldis Data Systems' trademark policy.

The word MULDIS is intended to be used as the distinguishing brand name for
all the products and services of Muldis Data Systems.  So we would greatly
appreciate it if in general you do not incorporate the word MULDIS into the
name or logo of your website, business, product or service, but rather use
your own distinct name (exceptions appear below).  It is, however, always
okay to use the word MULDIS only in descriptions of your website, business,
product or service to provide accurate information to the public about
yourself.

If you do incorporate the word MULDIS into your names anyway, either
because you have permission from us or you have some other good reason,
then:  You must make clear that you are not Muldis Data Systems and that
you do not represent Muldis Data Systems.  A simple or conspicuous
disclaimer on your home page and product or service documentation is an
excellent way of doing that.

Please respect the conventions of the Perl community by not using the
namespace C<Muldis::> at all for your own works, unless you have explicit
permission to do so from Muldis Data Systems; that namespace is mainly just
for our official works.  You can always use either the C<MuldisX::>
namespace for related unofficial works, or some other namespace that is
completely different.  Also as per conventions, its fine to use C<Muldis>
within a Perl package name where that word is nested under some other
project-specific namespace (for example, C<Foo::Storage::Muldis_D_Ref_Eng> or
C<Bar::Interface::Muldis_D_Ref_Eng>), and the package serves to interact with
a Muldis Data Systems work or service.

If you have made a language variant or extension based on the B<Muldis D>
language, then please follow the naming conventions described in the
VERSIONING (L<Muldis::D/VERSIONING>) documentation of the official
B<Muldis D> language spec.

If you would like to use (or have already used) the word MULDIS for any use
that ought to require permission, please contact Muldis Data Systems and
we'll discuss a way to make that happen.

=head1 ACKNOWLEDGEMENTS

None yet.

=head1 FORUMS

Several public email-based forums exist whose main topic is
the L<Muldis D|Muldis::D> language and its implementations, especially
the L<Muldis::D::Ref_Eng> reference implementation, but also
the L<Set::Relation> module.  They exist so that users of Muldis D or
Muldis::D::Ref_Eng can help each other, or so that help coming from the
projects' developers can be said once to many people, rather than
necessarily to each individually.  All of these you can reach via
L<http://mm.darrenduncan.net/mailman/listinfo>; go there to manage your
subscriptions to, or view the archives of, the following:

=over

=item C<muldis-db-announce@mm.darrenduncan.net>

This low-volume list is mainly for official announcements from Muldis D
language or implementation developers, though developers of related projects
can also post their announcements here.  This is not a discussion list.

=item C<muldis-db-users@mm.darrenduncan.net>

This list is for general discussion among people who are using Muldis D or
any of its implementations, especially the Muldis::D::Ref_Eng reference
implementation.  This is the best place to ask for basic help in getting
Muldis::D::Ref_Eng installed on your machine or to make it do what you want.
If you are in doubt on which list to use, then use this one by default.
You could also submit feature requests for Muldis D projects or report
perceived bugs here, if you don't want to use CPAN's RT system.

=item C<muldis-d-language@mm.darrenduncan.net>

This list is mainly for discussion among people who are designing the
Muldis D language specification, or who are implementing or adapting Muldis
D in some form, or who are writing Muldis D documentation, tests, or
examples.  It is not the main forum for any Muldis D implementations, nor
is it the place for non-implementers to get help in using said.

=item C<muldis-db-devel@mm.darrenduncan.net>

This list is for discussion among people who are designing or implementing
Muldis::D::Ref_Eng, or other Muldis D implementations,
or who are writing Muldis::D::Ref_Eng core documentation,
tests, or examples.  It is not the main forum for the Muldis D language
itself, nor is it the place for non-implementers to get help in using said.

=back

An official IRC channel for Muldis D and its implementations is also
intended, but not yet started.

Alternately, you can purchase more advanced commercial support for various
Muldis D implementations, particularly Muldis::D::Ref_Eng, from its author by
way of Muldis Data Systems; see L<https://muldis.com> for details.

=cut
